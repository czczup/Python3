输入函数
•input()函数从控制台获得用户输入。使用方法如下：
<变量>=input(<提示性文字>)
•获得的用户输入以字符串形式保存在<变量>中

分支语句
•分支语句用来根据判断条件选择程序执行的不同路径
if   <条件1>
     <表达式组1>
elif <条件2>
     <表达式组2>

赋值语句
•同步赋值指同时给多个变量赋值，即先运算右侧N个表达式，然后同时将表达式结果赋给左侧
<变量1>,...,<变量n>=<表达式1>,...,<表达式n>
    例：将变量x和y交换
    •采用单个赋值，需要3行语句：
     临时变量法
    •采用同步赋值语句仅需一行代码：
     x,y=y,x

输出函数
•print()函数用来输出字符信息，或以字符形式输出变量的值
•print()函数通过%来选择要输出的变量

例：
num1 = input("The first number is")
num2 = input("The second number is")
avg_num = (float(num1) + float(num2)) / 2
print("The average number is %f" % avg_num)

循环语句
•循环语句是控制程序循环运行的语句。这类语句一般根据判断条件或者计数条件确定一段程序的运行次数。
•计数循环基本过程：
    for i in range(<计数值>):
	<表达式组>

inital-print模板
•初始变量:运算需要的初始值
•运算部分:根据算法实现
•结果输出:print()输出结果

def定义函数
•函数是一组代码的集合，用于表达一个功能，或者说函数表示一组代码的归属，函数名字是这段代码的名字
•def所定义的函数在程序中未经调用不能直接执行，需要通过函数名调用才能够执行

字符串处理方法
<string>.upper()
<string>.lower()
<string>.capitalize()
<string>.strip()
<string>.split()
<string>.isdigit()
<string>.find()
<string>.replace()

遍历字符串中的每个字符
for <var> in <string>

元组类型 
•元组是包含多个元素的类型，元素之间用逗号分隔
例如:t1 = 123,456,"hello"
•元组可以是空的,t2 = ()
•元组包含一个元素:t3 = 123
•元组外侧可以使用括号，也可以不使用

元组有三个特点
•元组中元素可以是不同类型
例如:t3 = 123,456,("hello","中国")
•元组中各元素存在先后关系，可以通过索引访问元组中元素
例如:t3[0]
•元组定义后不能更改，也不能删除

元组的概念
•与字符串类型相似，可以通过索引区间来访问元组中部分。t[1:]
•与字符串一样，元组之间可以使用 + 号和 * 号进行运算

列表类型及其操作
•列表是有序的元素集合
•列表中的元素可以通过索引进行访问
•列表中的每个元素类型可以是不一样的
•列表的大小没有限制，可以随时修改

列表的操作
<seq> + <seq>                   连接两个序列
<seq> * <整数类型>              对序列进行整数次重复
<seq>[<整数类型>]               索引序列中的元素
Len(<seq>)                      序列中元素个数
<seq>[<整数类型>:<整数类型>]    取序列的一个子序列
For <var> in <seq>:             对序列进行循环列举
<expr> in <seq>                 成员检查

<list>.append(x)                元素x追加在列表最后
<list>.sort()                   将列表元素排序
<list>.reverse()                将列表元素反转
<list>.index()                  返回第一次出现元素x的索引值
<list>.insert(i,x)              在位置i处插入新元素x
<list>.count(x)                 返回元素x在列表中的数量
<list>.remove(x)                删除列表中第一次出现的元素x
<list>.pop(i)                   取出列表中位置i的元素，并删除它

列表的操作
字符串可以通过split()函数，将字符串拆分成一个列表
例如:
>>>"Python is an excellent language".split()
['Python','is','an','excellent','language'] 

math库
函数              含义
圆周率pi          π的近似值,15位小数
自然常数e         e 的近似值,15位小数
ceil(x)           对浮点数向上取整
floor(x)          对浮点数向下取整
pow(x,y)          计算x的y次方
log(x)            以e为基的对数
log10(x)          以10为基的对数
sqrt(x)           平方根
exp()             e的x次幂
degrees()         将弧度转换为角度
radians()         将角度转换为弧度
sin(x)            正弦函数
cos(x)            余弦函数
tan(x)            正切函数
asin(x)           反正弦函数,x∈[-1.0,1.0]   
acos(x)           反余弦函数,x∈[-1.0,1.0]
atan(x)           反正切函数,x∈[-1.0,1.0]

random库
seed(x)           给随机数一个种子值，默认随机种子是系统时钟
random()          生成一个[0,1.0]之间的随机小数
uniform(a,b)      生成一个a到b之间的随机小数
randint(a,b)      生成一个a到b之间的随机整数
randrange(a,b,c)  随机生成一个从a开始到b以c递增的数
choice(<list>)    从列表中随机返回一个元素
shuffle(<list>)   将列表中的元素随机打乱
sample(<list>,k)  从指定列表随机获取k个元素
设置相同的随机种子，会产生一样的随机数
计算机是一种确定的设备，不能产生真正的随机数

循环结构
当型循环结构
直到型循环结构

简单条件构造
=赋值，==等于
关系操作符<,<=,==,>=,>,!=
除数字外，字符或字符串也可以按照字典顺序用于条件比较

for循环
•Python可以使用for语句遍历整个序列的值
for <var> in <sequence>:
    <body>
•在for循环中，循环遍历var遍历了队列中的每一个值，循环的语句体为每个值执行一次

for循环缺点
•程序开始时必须提供输入数字总数
•大规模数字求平均数需要用户先数清楚个数
•for需要提供固定的循环次数
•Python提供了另一种循环模式即无限循环，不需要提前知道循环次数

while循环
while <condition>:
    <body>
•while语句中的<condition>是布尔表达式

死循环的使用
•死循环并非是一无是处，C语言中死循环while true或while 1是单片机编程的普遍用法，死循环一直运行，等待中断程序发生然后去处理中断程序

布尔操作符
•布尔操作符:and,or,not
    •<expr> and <expr>
    •<expr> or <expr>
•not计算布尔值的反

函数定义
def <name>(<parameters>):
    <body>
不需要定义返回类型，可以返回任何类型
•函数名<name>:任何有效的Python标识符
•参数列表<parameters>:调用函数时传递给它的值
    •参数个数大于0
    •多个参数由逗号分隔
•形式参数:定义函数时，函数名后面圆括号中的变量，简称形参。形参只在函数内部有效
•实际参数:调用函数时，函数名后面圆括号中的变量，简称实参
return语句:结束函数调用，并将结果返回给调用者
return可以返回多个值

函数和程序结构
•函数可以简化程序，并且函数可以使程序模块化
•用函数将较长的程序分割成短小的程序段，可以方便理解

递归定义特征
•有一个或多个基例是不需要再次递归的
•所有的递归链都要以一个基例结尾

递归函数
•递归每次调用都会引起新函数的开始
•递归有本地值得副本，包括该值的参数
•阶乘递归函数中:每次函数调用中的相关n值在中途的递归链暂时存储，并在函数返回时使用

字符串反转
•Python列表有反转的内置方法
方法1:字符串转换为字符列表，反转列表再转换回字符串
方法2:递归
    •构造递归函数，需要基例
    •基例不进行递归，否则递归就会无限循环执行

文件
•存储在外部介质上的数据或信息集合
•有序的数据序列

文本显示
•计算机显示功能的基本问题

编码
•信息从一种形式或格式转换为另一种形式或格式的过程

常用的编码
•ASCII码是标准化字符集
    •7个二进制位编码
    •表示128个字符
    >>>ord('A')
    65
    >>>chr(65)
    'A'
•Unicode
    •跨语言，跨平台
    •统一且唯一的二进制编码
    •每个字符两个字节长
    •65536个字符的编码空间
    •"严":十六进制数为4E25
•UTF-8
    •可变长度的Unicode
    
Python中字符串类型未编码
•编码encode()
•解码decode()

•GBK编码
    •《汉字内码扩展规范》
    •双字节编码

文件数据
•文本文件
    •以ASCII码方式存储的文件
    
•二进制文件
    •更加节省空间
    •采用二进制无格式存储
    •表示更为精确

注意
•文本文件是基于字符定长的ASCII
•二进制文件的编码是变长的，灵活利用率高
•不同的二进制文件解码方式不同

打开文件
•建立磁盘上的文件与程序中的对象相关联
•通过相关的文件对象获得

文件操作
•读取
•写入
•定位
•其他:追加、计算

关闭文件
•切断文件与程序的联系
•写入磁盘，并释放文件缓冲区

打开文件
•open()
<var> = open(<name>,<mode>)
<name>打开文件名
<mode>打开模式

打开模式
r         只读。如果文件不存在，则输出错误。
w         只写。如果文件不存在，则自动创建文件。
a         附加到文件末尾
rb        只读二进制文件，如果文件不存在，则输出错误。
wb        只写二进制文件，如果文件不存在，则自动创建文件。
ab        附加到二进制文件末尾
r+        读写

打开文件举例
>>>infile = open("numbers.dat","r")
>>>infle = open("music.mp3","rb")

文件读取
read()       返回值为包含整个文件内容的一个字符串
readline()   返回值为构成下一行内容的字符串
readlines()  返回值为整个文件内容的列表，每项是以换行符结尾的一行字符串

文件写入
write()      把含有文本数据或二进制数据块的字符串写入文件中
writelines() 针对列表操作，接受一个字符串列表作为参数，将它们写入文件，并且行结束符不会被自动加入

文件遍历
•最常见的文件处理方法
•举例
    •拷贝文件
    •根据数据文件定义行走路径
    •将文件由一种编码转换为另一种编码
•遍历文件通用代码框架
file = open(someFile，"r")
for line in filelines():
    #处理一行文件内容
file.close()

字典
•针对非序列集合而提供的一种数据类型
•举例:检索学生或员工信息
    •"<键><值>对"
    •键(身份证号码)
    •值(学生信息)

什么是字典
•通过任意键值查找集合中值信息的过程叫映射
•Python中通过字典实现映射
•字典是一个键值对的集合
    •该集合以键为索引
    •同一个键信息对应一个值
>>>passwd = {"China":"BigCountry","Korean":"SmallCountry"}
>>>print(passwd)
{'China':'BigCountry','Korean':'SmallCountry'}

字典类型与序列类型的区别
•存取和访问的方式
•键的类型
•排列方式
•映射值得方式

为字典增加一项
•dictionaryName[key] = value
•举例
>>>students = {"203-2012-045":"John","203-2012-037":"Peter"}
>>>students["202-2011-121"] = "Susan"

访问字典中的值
•dictionaryName[key]返回键key对应的值value
•若输入的键不存在，则返回错误信息

删除字典中的一项
•del dictionaryName[key]

字典的遍历
•for key in dictionaryName:
     print(key + ":" + str(dictionaryName[key]))

字典的遍历
•遍历字典的键key
    for key in dictionaryName.keys():print(key)
•遍历字典的值value
    for value in dictionaryName.values():print(value)
•遍历字典的项
    for item in dictionaryName.items():print(item)
•遍历字典的key-value
    for item,value in adict.items():print(item,value)

判断一个键是否在字典中
•in或not in
>>>"203-2012-045" in students
True

字典相等测试
>>>d1 = {"red":41,"blue":3}
>>>d2 = {"blue":3,"red":41}
>>>d1 == d2
True

字典方法
keys():tuple        返回一个包含字典所有key的列表
values():tuple      返回一个包含字典所有value的列表
items():tuple       返回一个包含所有键值的列表
clear():None        删除字典中的所有项目
get(key):value      返回字典中key对应的值
pop(key):value      删除并返回字典中key对应的值
update(字典)        将字典中的键值添加到字典中

自顶向下的设计
•步骤1:将算法表达为一系列小问题
•步骤2:为每个小问题设计接口
•步骤3:通过将算法表达为接口关联的多个小问题来细化算法
•步骤4:为每个小问题重复上述步骤

自底向上的执行
•从底层模块一个一个测试

单元测试
•小规模程序
    •直接运行
•中等规模
    •从结构图底层开始,逐步上升
    •先运行每个基本函数,再测试整体函数
•较大规模
    •高级软件测试方法
















